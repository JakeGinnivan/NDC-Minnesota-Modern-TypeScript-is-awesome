interface TextBlock {
    type: 'text'
    text: string
    formatting: TextFormatting
}
interface StandfirstBlock {
    type: 'standfirst'
    text: string
}
interface BlockQuote {
    type: 'blockquote'
    quote: string
    cite: string
}

type Blocks = TextBlock | StandfirstBlock | BlockQuote
type BlockTypes = Blocks['type']

const renderBlock = ({ block }: { block: Blocks }) => {
    switch (block.type) {
        case 'text':
            return <TextComponent text={block.text} formatting={block.formatting} />

        case 'standfirst':
            return <p className="standfirst">{block.text}</p>

        case 'blockquote':
            return (
                <blockquote>
                    {block.quote}
                    <footer>{block.cite}</footer>
                </blockquote>
            )

        default:
            assertNever(block)
    }
}

function assertNever(block: Blocks): never {
    throw new Error(`${block.type} is not handled`)
}

interface TextFormatting {
    type: 'italic' | 'bold'
    to: number
    from: number
}
