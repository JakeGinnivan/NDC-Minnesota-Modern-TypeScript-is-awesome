interface Article {
    heading: string
    byline?: string
    contents: Blocks[]
}

// type Partial<T> = {
//     [P in keyof T]?: T[P];
// }
type PartialArticle = Partial<Article>


// type Readonly<T> = {
//     readonly [P in keyof T]: T[P];
// }
type ReadonlyPerson = Readonly<Person>


// type Pick<T, K extends keyof T> = {
//     [P in K]: T[P];
// }
type ArticleSummary = Pick<Article, 'heading' | 'byline'>